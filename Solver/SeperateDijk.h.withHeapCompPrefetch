#ifndef SPERATEDIJK_H_
#define SPERATEDIJK_H_
#include <sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <malloc.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <immintrin.h>
#include <omp.h>
#include "../Utils/ColorUtils.h"

class SeperateDijk;

namespace SeperateDijkUtils {
    class Syncer {
        omp_lock_t lock;
        bool *marker;
        int counter;
        const int N;

        inline void set(int p);

        inline void unset(int p);

    public:
        Syncer(int n);

        inline void setSafe(int p, SeperateDijk * const solver);

        inline void unsetSafe(int p);

        bool ready(int p);

        bool ready();

        ~Syncer();
    };
}


using Utils::OMPLockStacks;
using Utils::Node;
using Utils::LeanHeap;

#include <climits>
class SeperateDijk: public Solver<AdjacentMatrix> {

    char name[1024];
    const int THREAD_NUM, NUM_RELAX_EACH_ITERATION;
    OMPLockStacks *stacks;
    const char * SOURCE_SRC;
    const int *colors, *label, *unlabel;

    int *shortestArc;
    SeperateDijkUtils::Syncer *syncer;

    friend class SeperateDijkUtils::Syncer;

  void relax(AdjacentMatrix *matrix, int &totalScan, float& heapOpSec, FILE* fileNode, FILE* fileW,int* nodes, int* ws, int count, int minIndex, int maxIndex, Node* ng, LeanHeap& heap) {
        int pid = omp_get_thread_num();
        // if (pid != 119) return;
        CycleTimer heapOpTimer, perfTimer;
        float perfS;
        AdjacentMatrix::Arch *&archArray = matrix->archArray;
        int *&g = matrix->g;
        int *&result = matrix->result;
        Utils::Item data;
        int &src_node = data.key, &src_result = data.value;

#pragma noinline
        heapOpTimer.Start();

        _mm_prefetch((const char*)(ng + heap.heap[0].key), _MM_HINT_T1);
        _mm_prefetch((const char*)(ng + ng[heap.heap[0].key].to[0] - minIndex), _MM_HINT_T1);
        _mm_prefetch((const char*)(ng + ng[heap.heap[0].key].to[1] - minIndex), _MM_HINT_T1);
        _mm_prefetch((const char*)(ng + ng[heap.heap[0].key].to[2] - minIndex), _MM_HINT_T1);

        while (heap.size != 0) {
        // for (int idx = 0; idx < count; idx++) {
          _mm_prefetch((const char*)(ng + heap.heap[1].key), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[1].key].to[0] - minIndex), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[1].key].to[1] - minIndex), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[1].key].to[2] - minIndex), _MM_HINT_T1);

          _mm_prefetch((const char*)(ng + heap.heap[2].key), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[2].key].to[0] - minIndex), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[2].key].to[1] - minIndex), _MM_HINT_T1);
          _mm_prefetch((const char*)(ng + ng[heap.heap[2].key].to[2] - minIndex), _MM_HINT_T1);

          heap.removeTop(&data);
          int curr = data.key;
#ifdef PERF_SCAN
            ++totalScan;
#endif

#pragma unroll
            for (int i = 0; i < 3; ++i) {
              int &dst_node = ng[curr].to[i];
              int &weight = ng[curr].w[i], new_dst_result = ng[curr].dist + weight;
                if (dst_node >= minIndex && dst_node <= maxIndex) {
                  if (ng[dst_node - minIndex].dist > new_dst_result) {
                    ng[dst_node - minIndex].dist = new_dst_result;
                    heap.addOrUpdate(dst_node - minIndex, new_dst_result);
                  }
                }
            }
        }
#pragma noinline
        heapOpTimer.Stop();
        heapOpSec += heapOpTimer.GetSecond();
        printf("pid = %d, perfS = %f\n", pid, perfS);
        for (int i = minIndex; i <= maxIndex; i++)
          result[i] = ng[i - minIndex].dist;
        _mm_free(ng);
    }

    void adjust(AdjacentMatrix *matrix) {
        int pid = omp_get_thread_num();
        int *&result = matrix->result;
        Utils::Item data;
        int &src_node = data.key, &src_result = data.value;
    }

    void worker(AdjacentMatrix *matrix, int &totalScan, float & heapOpSec, FILE* file,
                int count, std::vector<int>& sourceNodes, std::vector<int>& sourceVals, int& cap) {
        int pid = omp_get_thread_num();

        AdjacentMatrix::Arch *&archArray = matrix->archArray;
        int *&g = matrix->g;
        int *&result = matrix->result;
        Utils::Item data;
        int &src_node = data.key, &src_result = data.value;

        int minIndex = INT_MAX, maxIndex = -1;
        for (int i = 0; i < matrix->n; i++) {
          if (colors[i] == pid) {
            minIndex = std::min(minIndex, i);
            maxIndex = std::max(maxIndex, i);
          }
        }
        Node* ng = (Node*)_mm_malloc(sizeof(Node)* (maxIndex - minIndex + 1), 256);
        for (int i = minIndex; i <= maxIndex; i++) {
          ng[i - minIndex].dist = result[i];
          for (int j = g[i]; j < g[i+1] && j < g[i] + 3; j++) {
            if ( j < g[i+1]) {
              ng[i - minIndex].to[j - g[i]] = archArray[j].j;
              ng[i - minIndex].w[j - g[i]] = archArray[j].w;
            } else {
              ng[i - minIndex].to[j - g[i]] = 0;
              ng[i - minIndex].w[j - g[i]] = INT_MAX/2;
            }
            ng[i - minIndex].heapIndex = -1;
          }
        }
        int sum = 0;
        for (int i = minIndex; i <= maxIndex; i++) {
          sum += ng[i - minIndex].to[0];
        }
        LeanHeap heap(512, ng);
        for (int i = 0; i < sourceNodes.size(); i++) {
          heap.addOrUpdate(sourceNodes[i] - minIndex, sourceVals[i]);
        }
        printf("sum = %d, heap.size = %d, sourceNodes.size == %d\n", sum, heap.size, sourceNodes.size());
#pragma noinline
        relax(matrix, totalScan, heapOpSec, NULL, NULL, NULL, NULL, count, minIndex, maxIndex, ng, heap);
        cap = heap.cap;
        //heaps->printStats(pid);
    }

public:
 SeperateDijk(int thread_num, const char * SOURCE_SRC, int num_relax_each_iteration) :
    THREAD_NUM(thread_num), SOURCE_SRC(SOURCE_SRC), NUM_RELAX_EACH_ITERATION(num_relax_each_iteration), colors(NULL), label(NULL), unlabel(NULL), syncer(NULL) {
        sprintf(name, "Dijstra + Adjustment + GlobalHeapStack: THREAD_NUM=%d, NUM_RELAX_EACH_ITERATION=%d", THREAD_NUM, NUM_RELAX_EACH_ITERATION);
    }

    const char * getName() {
        return name;
    }

    void compute(AdjacentMatrix &adjMatrix, Colors *colors, int source, double &prepareTimeS, double &runningTimeS, double &totalScan, double &avgScan) {
        omp_set_num_threads(THREAD_NUM);

        CycleTimer prepareTimer, runningTimer;
#ifdef PERF_SCAN
        totalScan = 0;
#endif

        // Step 1: prepare Environment
        prepareTimer.Start();

        int &n = adjMatrix.n;
        this->colors = colors->getColors();
        this->label = colors->getlabel();
        this->unlabel = colors->getunlabel();

        int *&result = adjMatrix.result;
        adjMatrix.resetResult();

        /*
         * create heaps and stacks for each thread
         */

        /**
         * create and init shortestArc for each node
         **/
        AdjacentMatrix::Arch *&archArray = adjMatrix.archArray;
        int *&g = adjMatrix.g;
        adjMatrix.buildSimple();
        shortestArc = new int[n];
        for (int i = 0; i < n; i++) {
          int result = INT_MAX;
          for (int j = g[i]; j < g[i + 1]; j++) {
            int &dst_node = archArray[j].j, &weight = archArray[j].w;
            if (weight < result) result = weight;
          }
          shortestArc[i] = result;
        }
        std::vector<int> sourceNodes[THREAD_NUM];
        std::vector<int> sourceVals[THREAD_NUM];
        /*
         * create syncer
         */
        FILE* file = fopen(SOURCE_SRC, "rb");
        if (file == NULL) {
          perror("file fopen");
        }
        size_t nnode;
        fread(&nnode, sizeof(size_t), 1, file);
        for (int i = 0; i < nnode; i++) {
          int node, val;
          fread(&node, sizeof(int), 1, file);
          fread(&val, sizeof(int), 1, file);
          sourceNodes[this->colors[node]].push_back(node);
          sourceVals[this->colors[node]].push_back(val);
          result[node] = val;
        }
        fclose(file);
        prepareTimer.Stop();

        // Step 2: start to compute
        runningTimer.Start();

        result[source] = 0;

        float slowest = 0;
        int maxCap = 0;
#pragma omp parallel
        {
            int ts = 0;
            CycleTimer threadTimer, fileTimer;
            float heapOpSec = 0;
            int pid = omp_get_thread_num();
            Utils::Item *queue = NULL;
            /* int fd = open(filename, O_RDONLY); */
            /* assert(fd != -1); if (fd == -1) perror("open"); */
            /* queue = (Utils::Item*)mmap(NULL, sizeof(Utils::Item)*colors->getNodeNumberCount()[pid], */
            /*                            PROT_READ, MAP_ANONYMOUS | MAP_PRIVATE, fd, 0); */
            /* if (queue == MAP_FAILED) perror("mmap"); */
            /*  assert(queue != MAP_FAILED); */
            int cap;
            threadTimer.Start();
            worker(&adjMatrix, ts, heapOpSec, NULL, colors->getNodeNumberCount()[pid], sourceNodes[pid], sourceVals[pid], cap);
            threadTimer.Stop();
#pragma omp critical
            {
              slowest = std::max(slowest, heapOpSec);
              maxCap = std::max(maxCap, cap);
            }
            printf("pid = %d, sec = %lf, file sec = %lf, # of nodes = %d\n", pid, threadTimer.GetSecond(), heapOpSec,
                   colors->getNodeNumberCount()[pid]);
#ifdef PERF_SCAN
#pragma omp atomic
            totalScan += ts;
#endif
        }
        runningTimer.Stop();
        printf("slowest = %lf, maxCap = %d\n", slowest, maxCap);
        int nunreached = 0;
        for (int i = 0; i < n; i++) {
          if (adjMatrix.result[i] == BaseGraph::RESULT_MAX_VALUE) {
            nunreached++;
          }
        }
        printf("nunreached = %d, sizeof node = %u\n", nunreached, sizeof(Node));
        // Step 3: destroy environment
        prepareTimer.Start();

        /*
         * destroy heaps and stacks for each thread
         */

        prepareTimer.Stop();

        runningTimeS = runningTimer.GetSecond();
        prepareTimeS = prepareTimer.GetSecond();
#ifdef PERF_SCAN
        avgScan = totalScan / THREAD_NUM;
#endif
    }
};

namespace SeperateDijkUtils {

    inline void Syncer::set(int p) {
        if (!marker[p]) ++counter;
        marker[p] = true;
    }

    inline void Syncer::unset(int p) {
        if (marker[p]) --counter;
        marker[p] = false;
    }

    Syncer::Syncer(int n) :
            counter(0), N(n) {
        omp_init_lock(&lock);
        marker = (bool*) malloc(n * sizeof(bool));
        memset(marker, 0, sizeof(bool) * n);
    }

    inline void Syncer::setSafe(int p, SeperateDijk * const solver) {
        if (marker[p]) return;
        omp_set_lock(&lock);
        omp_unset_lock(&lock);
    }

    inline void Syncer::unsetSafe(int p) {
        if (!marker[p]) return;
        omp_set_lock(&lock);
        unset(p);
        omp_unset_lock(&lock);
    }

    bool Syncer::ready(int p) {
        return marker[p];
    }

    bool Syncer::ready() {
        return counter == N;
    }

    Syncer::~Syncer() {
        free(marker);
        omp_destroy_lock(&lock);
    }

}

#endif
